var search_data = {"index":{"searchIndex":["hangman","game","state","ask_for_filename()","ask_for_input()","display()","execute_command()","execute_guess()","execute_load()","execute_quit()","execute_save()","guess_update_guesses_left()","guess_update_match_string()","guessed?()","human_command()","human_letter()","letter?()","letter_update_guesses_left()","letter_update_match_string()","load_words()","lose()","lose?()","new()","new()","not_proper?()","quit()","quit?()","select_word()","start()","take_turn()","valid_length?()","win()","win?()","winnow_words()","5desk","readme"],"longSearchIndex":["hangman","hangman::game","hangman::state","hangman::game#ask_for_filename()","hangman::game#ask_for_input()","hangman::state#display()","hangman::game#execute_command()","hangman::game#execute_guess()","hangman::game#execute_load()","hangman::game#execute_quit()","hangman::game#execute_save()","hangman::state#guess_update_guesses_left()","hangman::state#guess_update_match_string()","hangman::game#guessed?()","hangman::game#human_command()","hangman::game#human_letter()","hangman::game#letter?()","hangman::state#letter_update_guesses_left()","hangman::state#letter_update_match_string()","hangman::game#load_words()","hangman::game#lose()","hangman::state#lose?()","hangman::game::new()","hangman::state::new()","hangman::game#not_proper?()","hangman::game#quit()","hangman::state#quit?()","hangman::game#select_word()","hangman::game#start()","hangman::game#take_turn()","hangman::game#valid_length?()","hangman::game#win()","hangman::state#win?()","hangman::game#winnow_words()","",""],"info":[["Hangman","","Hangman.html","","<p>This module wraps a Hangman game in its own namespace\n"],["Hangman::Game","","Hangman/Game.html","","<p>This class operates the game\n"],["Hangman::State","","Hangman/State.html","","<p>This class handles game state information\n"],["ask_for_filename","Hangman::Game","Hangman/Game.html#method-i-ask_for_filename","()",""],["ask_for_input","Hangman::Game","Hangman/Game.html#method-i-ask_for_input","()",""],["display","Hangman::State","Hangman/State.html#method-i-display","(line_width)",""],["execute_command","Hangman::Game","Hangman/Game.html#method-i-execute_command","(command)",""],["execute_guess","Hangman::Game","Hangman/Game.html#method-i-execute_guess","()",""],["execute_load","Hangman::Game","Hangman/Game.html#method-i-execute_load","()",""],["execute_quit","Hangman::Game","Hangman/Game.html#method-i-execute_quit","()",""],["execute_save","Hangman::Game","Hangman/Game.html#method-i-execute_save","()",""],["guess_update_guesses_left","Hangman::State","Hangman/State.html#method-i-guess_update_guesses_left","()",""],["guess_update_match_string","Hangman::State","Hangman/State.html#method-i-guess_update_match_string","()",""],["guessed?","Hangman::Game","Hangman/Game.html#method-i-guessed-3F","(input)",""],["human_command","Hangman::Game","Hangman/Game.html#method-i-human_command","(input)",""],["human_letter","Hangman::Game","Hangman/Game.html#method-i-human_letter","(input)",""],["letter?","Hangman::Game","Hangman/Game.html#method-i-letter-3F","(input)",""],["letter_update_guesses_left","Hangman::State","Hangman/State.html#method-i-letter_update_guesses_left","()",""],["letter_update_match_string","Hangman::State","Hangman/State.html#method-i-letter_update_match_string","()",""],["load_words","Hangman::Game","Hangman/Game.html#method-i-load_words","()",""],["lose","Hangman::Game","Hangman/Game.html#method-i-lose","()",""],["lose?","Hangman::State","Hangman/State.html#method-i-lose-3F","()",""],["new","Hangman::Game","Hangman/Game.html#method-c-new","()",""],["new","Hangman::State","Hangman/State.html#method-c-new","()",""],["not_proper?","Hangman::Game","Hangman/Game.html#method-i-not_proper-3F","(word)",""],["quit","Hangman::Game","Hangman/Game.html#method-i-quit","()",""],["quit?","Hangman::State","Hangman/State.html#method-i-quit-3F","()",""],["select_word","Hangman::Game","Hangman/Game.html#method-i-select_word","()",""],["start","Hangman::Game","Hangman/Game.html#method-i-start","()",""],["take_turn","Hangman::Game","Hangman/Game.html#method-i-take_turn","()",""],["valid_length?","Hangman::Game","Hangman/Game.html#method-i-valid_length-3F","(word)",""],["win","Hangman::Game","Hangman/Game.html#method-i-win","()",""],["win?","Hangman::State","Hangman/State.html#method-i-win-3F","()",""],["winnow_words","Hangman::Game","Hangman/Game.html#method-i-winnow_words","()",""],["5desk","","5desk_txt.html","","<p>A a Aachen Aalborg aardvark Aarhus Aaron AB Ab abaci aback abacus Abadan\nabaft abalone abandon abandoned â€¦\n"],["README","","README_md.html","","<p>hangman\n<p>Hangman implementation in Ruby\n"]]}}